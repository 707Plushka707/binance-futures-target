<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Binance Caculator</title>
    <link rel="shortcut icon" href="https://unpkg.com/favicon.ico" />
    <script src="https://unpkg.com/vue@3"></script>
    <link href="https://unpkg.com/tailwindcss@^2/dist/tailwind.min.css" rel="stylesheet" />
    <link rel="preconnect" href="https://fonts.gstatic.com" />
    <link
      href="https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@300;400;500;600;700&display=swap"
      rel="stylesheet"
    />
    <link rel="stylesheet" href="/public/assets/css/app.css" />
  </head>
  <body class="bg-black text-gray-600">
    <div id="app">
      <div class="max-w-4xl mx-auto px-4 xl:px-0 py-4">
        <h1 class="text-3xl font-semibold text-center text-gray-400">Binance Futures: Balance Target</h1>
        <div class="grid grid-cols-3 gap-4 mt-16">
          <div>
            <p class="font-light text-gray-400">Balance</p>
            <h2 class="text-3xl text-blue-600">
              {{ crossWalletBalance }}
              <sup class="text-base text-gray-600">{{ asset }}</sup>
            </h2>
            <h4 class="text-gray-600 text-xs mt-4">
              Margin:
              <span
                class="mt-2 text-base font-semibold"
                :class="{'text-red-600': currentBalance < crossWalletBalance, 'text-green-500': currentBalance > crossWalletBalance, 'text-blue-600': currentBalance === crossWalletBalance}"
              >
                {{ currentBalance }} <sup>{{ asset }}</sup>
              </span>
            </h4>
            <p
              class="mt-2"
              :class="{'text-red-600': crossUnPnl < 0, 'text-green-500': crossUnPnl > 0, 'text-gray-600': crossUnPnl === 0}"
            >
              <span class="text-gray-600 text-xs mr-2">Unrealized PNL:</span>
              <template v-if="crossUnPnl > 0">+ </template>{{ crossUnPnl }}
              <span class="text-xs">{{ asset }}</span>
            </p>

            <div class="mt-16">
              <p class="text-gray-400 mb-2">History</p>

              <div
                v-for="item in histories"
                :key="item"
                class="font-light text-sm mb-1"
                :class="{'text-red-600': item.sign === '-', 'text-green-600': item.sign === '+', 'text-blue-600': item.sign === null}"
              >
                {{ item.sign }} {{ item.balance }}
                <span class="text-gray-600 text-xs mt-1">
                  {{ new Date(item.time).toLocaleString("en-US") }}
                </span>
              </div>
            </div>
          </div>

          <div>
            <p class="font-light text-gray-400">Distance</p>
            <h2 class="text-3xl" :class="{'text-red-600': distance >= 0}">
              <template v-if="distance >= 0">- </template>{{ distance }}
              <sup class="text-base text-gray-600">{{ asset }}</sup>
            </h2>
          </div>

          <div>
            <p class="font-light text-gray-400">Target</p>
            <h2 class="text-3xl text-purple-600">
              {{ targetBalance }}
              <sup class="text-base text-gray-600">{{ asset }}</sup>
            </h2>
          </div>
        </div>
      </div>
    </div>

    <script>
      Vue.createApp({
        data() {
          return {
            currentBalance: 0,
            targetBalance: 0,
            crossUnPnl: 0,
            distance: 0,
            asset: "USDT",
            crossWalletBalance: 0,
            history: [],
          }
        },

        mounted() {
          this.$nextTick(async () => {
            await this.fetch()
            const cached = localStorage.getItem("crossUnPnl")
            if (cached) {
              const currentCached = JSON.parse(cached)
              this.history = currentCached
            }

            setInterval(async () => await this.fetch(), 2000)
          })
        },

        computed: {
          histories() {
            return this.history
              .reverse()
              .reduce((acc, cur) => {
                const curVal = { ...cur }
                if (acc.length === 0) {
                  curVal.sign = null
                  return [...acc, curVal]
                } else if (cur.balance > acc.balance) {
                  curVal.sign = "+"
                  return [...acc, curVal]
                }

                curVal.sign = "-"
                return [...acc, curVal]
              }, [])
              .reverse()
          },
        },

        methods: {
          async fetch() {
            const $target = localStorage.getItem("target")
            const urlSearchParams = new URLSearchParams(window.location.search)
            const params = Object.fromEntries(urlSearchParams.entries())
            this.targetBalance = params.target || $target
            if (!$target && !params.target) this.targetBalance = 100
            if ($target !== this.targetBalance) localStorage.setItem("target", this.targetBalance)
            const response = await fetch(
              `http://localhost:5001/v1/balance?target=${this.targetBalance}`
            ).then((res) => res.json())
            this.currentBalance = response.currentBalance
            this.targetBalance = response.targetBalance
            this.crossUnPnl = response.crossUnPnl
            this.distance = response.distance
            this.asset = response.asset
            this.crossWalletBalance = Number(response.crossWalletBalance).toFixed(4)
            document.title = `${this.distance} | Binance Calculator`

            this.cached("crossUnPnl", Number(response.crossWalletBalance))
          },

          cached(key, val) {
            const cached = localStorage.getItem(key)

            if (!cached) {
              localStorage.setItem(
                key,
                JSON.stringify(
                  new Array(1).fill({
                    balance: val,
                    time: Date.now(),
                  })
                )
              )
            } else {
              const currentCached = JSON.parse(cached)
              if (currentCached[0].balance !== val) {
                localStorage.setItem(
                  key,
                  JSON.stringify([
                    {
                      balance: val,
                      time: Date.now(),
                    },
                    ...currentCached.slice(0, 20),
                  ])
                )
              }
            }
          },
        },
      }).mount("#app")
    </script>
  </body>
</html>
